package io.ifar.skidroad.rolling;

import org.joda.time.DateTime;

import java.io.File;

/**
 * Thread-safe API for making decisions about when log files should be rolled and how they should be named.
 */
public interface FileRollingScheme {

    /**
     * Given canonical file start time (e.g. top of the hour for hourly rolling), determine whether it is time to
     * roll the file. Note that in order to avoid spinning up a new file for straggler items this method should allow
     * a bit a buffer beyond the end of the allotted time slot.
     */
    boolean isTimeToClose(DateTime startTime);

    /**
     * Return the canonical start time (e.g. top of the hour for hourly rolling) for the current value of System.currentTimeMillis();
     */
    DateTime getCurrentStartTime();

    /**
     * Return the canonical start time (e.g. top of the hour for hourly rolling) for the provided time
     */
    DateTime getStartTime(long currentTimeMillis);

    File getBaseDirectory();

    /**
     * Returns a pattern for a file path for the provided canonical start time. Returned
     * value must have a %d into which a unique serial number can be interpolated by
     * String.format.
     */
    String makeOutputPathPattern(DateTime startTime);

    /**
     * Returns String representation of provided startTime. Usually corresponds to some part of the Path generated by makeNewOutputPath.
     */
    String getRepresentation(DateTime startTime);
}
